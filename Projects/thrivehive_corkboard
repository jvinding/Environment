CORKBOARD_BASE_DIR="${PROJECT_DIR}/Corkboard"

cic() {
    cd $CORKBOARD_BASE_DIR/corkboard-ingestion-coordinator
}

cic_run() {
    cic
    th_run "$@"
}

cte() {
    export CORKBOARD_GOOGLE_CREDENTIALS=$(<${HOME}/Environment/Secrets/thrivehive_corkboard_google_vision_creds)
    cd $CORKBOARD_BASE_DIR/corkboard-text-extraction
}

cte_run() {
    cte
    th_run
}

caa() {
    cd $CORKBOARD_BASE_DIR/corkboard-ad-analyzer
}
caa_run() {
    caa
    dotnet publish -c Release
    pushd src/ad-analyzer/bin/Release/netcoreapp2.1/publish > /dev/null
    sam local start-api --region=us-east-1
    popd > /dev/null
}

#
# Ad Service
#
ads() {
    export ASPNETCORE_ENVIRONMENT=Development
    cd $CORKBOARD_BASE_DIR/adservice
}
ads_run() {
    ads
    dotnet run -p ./AdService.Api/AdService.Api.csproj
}
ads_swagger() {
    ads
    cd ./AdService.Api
    dotnet build
    dotnet swagger tofile --output ../swagger.json ./bin/Debug/netcoreapp2.2/AdService.Api.dll v1
    cd ..
}

ads_db_setup() {
    ads
    dotnet build
    dotnet ef database update -p AdService.Api/AdService.Api.csproj
}

ads_db_migration_create() {
    local migration_name=${1:-}
    if [ -z "$migration_name" ]; then
        echo "Must specify a migration name" >&2
    else
        ads
        cd ./AdService.Persistence
        dotnet ef --startup-project ../AdService.Api/ migrations add "$migration_name"
    fi
}

ads_db_migrations_run() {
    ads
    dotnet build
    dotnet ef database update -p ./AdService.Api/AdService.Api.csproj
}

flattener() {
    cd $CORKBOARD_BASE_DIR/pdf-flattener
}
