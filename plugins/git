if which hub > /dev/null; then
    alias github='hub browse'
else
    github() {
        if [ ! -d .git ]; then
            echo "ERROR: This isnt a git directory"
            return false
        fi

        local git_url=`git ls-remote --get-url origin`
        local git_domain=`echo $git_url | awk -v FS="(@|:)" '{print $2}'`
        local git_branch=`git_get_branch`

        if [[ $git_url == https://* ]]; then
            url=${git_domain}/${git_url%.git}/tree/${git_branch}
        else
           if [[ $git_url == git@* ]]; then
                url="https://${git_domain}/${${git_url#*:}%.git}/tree/${git_branch}"
                echo $url
           else
               echo "ERROR: Remote origin is invalid"
               return false
           fi
        fi

        open $url
    }
fi

git_get_config_file() {
    local done=0
    local file=
    local gitdir=.git
    while [ 0 -eq $done ]; do
        if [ -d "$gitdir" ]; then
            if [ -f "${gitdir}/config" ]; then
                file="${gitdir}/config"
            fi
            done=1
        elif [ -f "$gitdir" ]; then
            gitdir="$(cat "$gitdir" | grep gitdir | awk '{print $2}')"
        else
            done=1
        fi
    done

    echo -n "$file"
}

git_assert_clean_tree() {
  local changes=`git_change_list`
  if ! [ -z "$changes" ]; then
    echo "Uncommited changes. Stash them then try again."
    return 1
  fi
}

git_cdup() {
    git branch > /dev/null 2>&1 || return 1
    cd "$(git rev-parse --show-cdup)".
}

git_get_branch() {
    git symbolic-ref --short HEAD 2> /dev/null
}

git_get_tracked_branch() {
    git config --get branch.$(git_get_branch).merge
}

git_has_branch() {
    git b | grep "\<${1}\$" > /dev/null
}

git_is_on_branch() {
    [ "$(git_get_branch)" == "$1" ]
}

git_change_list() {
    git ls-files -cdmosuk --exclude-standard | awk '{print $NF}'
}

git_branch() {
    local branch=$1
    if git_is_on_branch "$branch"; then
        echo "Already on branch $branch"
    elif git_has_branch "$branch"; then
        git co "$branch"
        git merge master
    else
        if ! git_is_on_branch master; then
            git checkout master || { echo "Failed to check out master"; return 1; }
        fi
        git pull || { echo "failed to pull"; return 1; }
        git co -b "$branch" || { echo "Failed to create branch $branch"; return 1; }
    fi
}

git_abandon_branch() {
    if ! git_is_on_branch master; then
        local changes=`git_change_list`
        if ! [ -z "$changes" ]; then
            git_change_list
            read -p "Abandon changes to the above files? y/N " -n1 delete
            if [ "$delete" == "Y" ] || [ "$delete" == "y" ]; then
                git checkout . || { echo "failed to checkout"; return 1; }
            else
                return 0
            fi
        fi

        local branch=`git_get_branch`
        git checkout master || { echo "Failed to check out master"; return 1; }
        git branch -d "$branch" || {
            read -p "Do you want to force deletion of the branch ${branch}? y/N " -n1 delete
            echo

            if [ "$delete" == "Y" ] || [ "$delete" == "y" ]; then
                git branch -D $branch
            fi
        }
    fi
}

git_prompt_stage() {
    local file="$1"
    local ignore_white_space=${2:=false}
    if [ true == $ignore_white_space ]; then
        git diff -w -- $file
    else
        git diff -- $file
    fi
    read -p "Stage the above file? y/p/w/N " -n1 stage
    echo
    if [ "$stage" == "Y" ] || [ "$stage" == "y" ]; then
        git add -- $file || { echo "failed to stage"; return 1; }
    elif [ "$stage" == "P" ] || [ "$stage" == "p" ]; then
        git add --patch -- $file || { echo "failed to stage"; return 1; }
    elif [ "$stage" == "W" ] || [ "$stage" == "w" ]; then
        git_prompt_stage $file true
    fi
}

git_stage() {
    ## TODO: support removed files
    ## TODO: add ability to revert a file
    for s in $(git_change_list); do
        git_prompt_stage "$s" false
    done
}

git_add() {
    for s in $(git ls-files -o --exclude-standard); do
        echo $s
        read -p "Stage the above file? y/N/q " -n1 stage
        if [ "$stage" == "Y" ] || [ "$stage" == "y" ]; then
            git add $s || { echo "failed to stage"; return 1; }
        elif [ "$stage" == "Q" ] || [ "$stage" == "q" ]; then
            return 0
        fi
        echo
    done
}

git_update() {
    git submodule update --recursive
    local changes=`git_change_list`
    if [ -n "$changes" ]; then
        git stash save --include-untracked "git update stash"
    fi

    if [ -n "$(git_change_list)" ]; then
        echo "Unstashable changes" >&2
        return 1
    fi

    git pull --rebase || return 1

    if ! [ -z "$changes" ]; then
        git stash pop
    fi

    git submodule update --recursive
}

git_push() {
    local changes=`git_change_list`
    if ! [ -z "$changes" ]; then
        git stash save --include-untracked "[$(date +"%Y-%d-%m")] git update stash"
    fi

    git pull --rebase || return 1
    git push

    if ! [ -z "$changes" ]; then
        git stash pop
    fi
}

git_find_unclean_repos() {
    for s in $(find . -maxdepth 1 -type d); do
        pushd "$s" > /dev/null
        if [ -d .git ] && ! git_assert_clean_tree > /dev/null; then
            pwd
        fi
        popd > /dev/null
    done
}

git_update_all() {
    for s in $(find . -type d -maxdepth 1 -not -name '.*'); do
        echo $s
        pushd $s > /dev/null
        git pull --rebase -q
        popd > /dev/null
    done
}

#
# aliases
#
alias abandon=git_abandon_branch
alias branch=git_branch
alias stage=git_stage
alias add=git_add
alias pr=git_update
alias push=git_push
alias gup=git_cdup

#
# Completion -- requires git-completion.bash
#
complete -o nospace -F _git_checkout git_branch
complete -o nospace -F _git_checkout branch
