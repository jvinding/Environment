
#################################### globals ###################################
#
#
export ENVIRONMENT_DIR=~/Environment
#
#
################################## end globals #################################

#################################### helpers ###################################
#
#
environment_require_lib() {
    safe_source ${ENVIRONMENT_DIR}/lib/$1
}
#
#
#################################### helpers ###################################

################################ set shell opts ################################
#
#
## export HOME=/localtmp/jvinding
umask 002
export EDITOR=vi
if [ $BASH ]
then
    set -o vi
    shopt -s extglob
    shopt -s checkwinsize
    shopt -s histappend
else
    export ENV=~/.bashrc
fi

export HISTSIZE=100000
export HISTFILESIZE=100000
export HISTCONTROL=erasedups:ignorespace
#
#
############################## end set shell opts ##############################

####################### source server specific settings  #######################
#
#
HOSTNAME=`uname -n`
export HOSTNAME=${HOSTNAME%%.*}
[ -f $ENVIRONMENT_DIR/Machines/$HOSTNAME ] && . $ENVIRONMENT_DIR/Machines/$HOSTNAME
#
#
##################### end source server specific settings  #####################


################################ source secrets ################################
#
#
environment_require_lib secrets
if [ ${#SECRETS[@]} -gt 0 ]; then
    secret_source_all
fi
#
#
############################## end source secrets ##############################

################################ source plugins ################################
#
#
environment_require_lib plugin
if [ ${#PLUGINS[@]} -gt 0 ]; then
    plugin_source_all
fi
#
#
############################## end source plugins ##############################

##################################### PATH #####################################
#
# let's setup the PATH so it works across many different machines
# but doesn't get cluttered up w/ non-existant dirs
#

#
# ~/bin and ~jvinding/bin for when i do su - <whoever>
#
for p in  $SERVERPATH /usr/local/bin $ENVIRONMENT_DIR/bin ~/bin
do
    if [ -d "$p" ]; then
        PATH=$p:$(echo $PATH | sed -e "s!:$p:!:!" -e"s!:$p\$!!")
    fi
done
export PATH
#
#
################################### end PATH ###################################

############################### LD_LIBRARY_PATH  ###############################
#
# read comment for PATH above
#
if ! [ "$(uname -s | tr -d '[:space:]')" == "Darwin" ]; then # skip this on macs
    for p in /usr/local/lib /data/advantage/perl-5.8.0/lib/5.8.0 $SERVERLDPATH
    do
        if [ -d $p ] && ! echo $LD_LIBRARY_PATH | egrep "(^|:)$p($|:)" > /dev/null
        then
            LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$p
        fi
    done
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH#:}
    export LD_LIBRARY_PATH
fi
#
#
############################### LD_LIBRARY_PATH  ###############################

################################## other vars ##################################
#
#
export DISPLAY=${SSH_CLIENT%% *}:0
if [ $BASH ]
then
    export HISTIGNORE='l:l[sa]:lsd:clear'
fi
#
#
################################ end other vars ################################

##################################### misc #####################################
#
# this is here instead of at the end, because on some machines
# a PROMPT_COMMAND is getting set in /etc/bashrc
#
[ $BASH ] && [ -f ~/.bashrc ] && . ~/.bashrc
#
#
################################### end misc ###################################

#################################### prompt ####################################
#
#
#Black       0;30     Dark Gray     1;30
#Blue        0;34     Light Blue    1;34
#Green       0;32     Light Green   1;32
#Cyan        0;36     Light Cyan    1;36
#Red         0;31     Light Red     1;31
#Purple      0;35     Light Purple  1;35
#Brown       0;33     Yellow        1;33
#Light Gray  0;37     White         1;37
BLACK="\[\033[0;30m\]"  # black
BLUE="\[\033[0;34m\]"   # blue
BLUE_UNESCAPED="\033[0;34m"   # blue
GREEN="\[\033[0;32m\]"  # green
GREEN_UNESCAPED="\033[0;32m"  # green
CYAN="\[\033[0;36m\]"   # cyan
RED="\[\033[0;31m\]"    # red
RED_UNESCAPED="\033[0;31m"    # red
PURPLE="\[\033[0;35m\]" # purple
BROWN="\[\033[0;33m\]"  # brown
GREY="\[\033[1;30m\]"   # grey
# enhanced
eGREY="\[\033[0;37m\]"   # light gray
eBLUE="\[\033[1;34m\]"   # light blue
eGREEN="\[\033[1;32m\]"  # light green
eCYAN="\[\033[1;36m\]"   # light cyan
eRED="\[\033[1;31m\]"    # light red
eRED_UNESCAPED="\033[1;31m"    # light red
ePURPLE="\[\033[1;35m\]" # light purple
ePURPLE_UNESCAPED="\[\033[1;35m\]" # light purple
eYELLOW="\[\033[1;33m\]" # yellow
eWHITE="\[\033[1;37m\]"  # white
# reset to teminal default
NORMAL="\[\033[0;0m\]"  # normal term color


if [ $BASH ]
then
    #
    # these are various ways of shortening the path for display
    #
    function chop_to_length {
        local pwd_length=50
        _TMP_PWD=${PWD/$HOME/~}
        if [ ${#_TMP_PWD} -gt $pwd_length ]
        then
            _TMP_PWD="...${_TMP_PWD:$(( ${#_TMP_PWD} - $pwd_length )):$pwd_length}"
        fi
    }
    function chop_middle_dirs {
        local pwd_length=50
        _TMP_PWD=${PWD/$HOME/~}
        if [ ${#_TMP_PWD} -gt $pwd_length ]
        then
            _TMP_PWD=$(echo -n ${_TMP_PWD#/} | perl -e'
                $_ = <>;
                @d=split m!/!; $l = @d - 2;
                print qq!/$d[0]/...$l.../$d[-1]!')
        fi
    }
    function prompt_pwd_chop_from_front {
        local pwd_length=${1:-50}
        local modified=0
        local pretty_pwd="${PWD/$HOME/~}"
        while [ -n "${pretty_pwd}" ] && [ ${#pretty_pwd} -gt $pwd_length ] && [[ "$pretty_pwd" =~ / ]]; do
            modified=1
            pretty_pwd=${pretty_pwd#*/}
        done

        if [ 1 -eq $modified ]; then
            pretty_pwd=".../${pretty_pwd}"
        fi

        local front_dirs=${pretty_pwd%/*}/
        local last_dir=${pretty_pwd##*/}
        if [ "~" == "${last_dir}" ]; then
            front_dirs=
        fi
        echo -ne "${BLUE_UNESCAPED}-=(${RED_UNESCAPED}${front_dirs}${GREEN_UNESCAPED}${last_dir}${BLUE_UNESCAPED})=-"
    }

    function svn_branch {
        echo $(svn info | grep ^URL | sed -e's!.*/\([^/]*\)!\1!')
    }

    prompt_scm_status() {
        local git_branch=$(git symbolic-ref --short HEAD 2> /dev/null)
        local git_hash=
        if [ -z "$git_branch" ]; then
            git_branch=$(git status 2> /dev/null | fgrep detached | perl -lpe 's/(?:\w+\W+)*(\w+)/Detached HEAD:\1/')
            git_hash=${git_branch##*:}
            git_branch=${git_branch%%:*}
        else
            git_hash="$(git rev-parse --short ${git_branch} 2> /dev/null)"
        fi

        if ! [ -z "$git_branch" ]; then
            echo -ne "${BLUE_UNESCAPED}-=(${GREEN_UNESCAPED}${git_branch} ${RED_UNESCAPED}[${git_hash}]${BLUE_UNESCAPED})=-"

            local git_status=$(git status -sb)
            local status_counts=

            local adds=$(echo "$git_status" | egrep -c '^(?:A|\?)')
            if [ "0" != "$adds" ]; then
              status_counts="${status_counts}${adds}+"
            fi
            local deletes=$(echo "$git_status" | egrep -c '^ ?D')
            if [ "0" != "$deletes" ]; then
              status_counts="${status_counts}${deletes}-"
            fi
            local mods=$(echo "$git_status" | egrep -c '^ ?M')
            if [ "0" != "$mods" ]; then
              status_counts="${status_counts}${mods}!"
            fi
            local tracked_branch=$(git_get_tracked_branch)
            if [ -z "$tracked_branch" ]; then
                status_counts="${status_counts}${eRED_UNESCAPED}?"
            fi

            local server_diffs=$(git status -sb | sed -n '/\[/ { s/^[^[]*\[//; s/\][^]]*$//; s/ahead \([0-9]*\)[, ]*/\1â†‘/; s/behind \([0-9]*\)/\1â†“/; p; }')
            status_counts="${status_counts}${server_diffs}"
            if ! [ -z "$status_counts" ]; then
              echo -ne "${BLUE_UNESCAPED}-=(${RED_UNESCAPED}${status_counts}${BLUE_UNESCAPED})=-"
            fi
        fi
    }

    prompt_command() {
        ## chop_front_dirs_to_fit
        if [[ "$TERM" =~ (xterm|screen).* ]]; then
            ## echo -e "\033]0;${USER}@${HOSTNAME}:$_TMP_PWD\007"
            host=$(hostname)
            printf "\033k${USER}@${host%%.*}\033\\"
        fi

        PS1="${GREEN}/$(prompt_pwd_chop_from_front)$BLUE-=($RED\$?$BLUE)=-" ## modified pwd and the return code of the last command
        scm=$(prompt_scm_status)
        if [ -n "$scm" ]; then
            PS1="${PS1}\n${GREEN}>${scm}"
        fi
        PS1="${PS1}\n${GREEN}\\\\$BLUE-=($RED\\u@\\h$BLUE)=-$CYAN \\$ $NORMAL" # user@host
    }


    export PROMPT_COMMAND=prompt_command
    ## PROMPT_CLEAR_TO_COL_1="\[\033[G\]"
    ## PROMPT_PWD="$BLUE-=($RED\${_TMP_PWD}$GREEN\${_LAST_DIR}$BLUE)=-"
    ## PROMPT_RETURN="$BLUE-=($RED\$?$BLUE)=-"
##    PROMPT_HISTORY="$BLUE-=($RED\!$BLUE)=-"
    ## PROMPT_JOBS="$BLUE-=($RED\j$BLUE)=-"
    ## PROMPT_USER="$BLUE-=($RED\\u"
    ## PROMPT_HOST="@\\h$BLUE)=-"
    ## PROMPT_PROMPT="$CYAN \\$ $NORMAL"
    ## PROMPT_LINE_1="$PROMPT_PWD$PROMPT_RETURN"
##    PROMPT_LINE_2="$PROMPT_SCM_BRANCH$PROMPT_SCM_STATUS$PROMPT_RETURN$PROMPT_JOBS"
    ## PROMPT_LINE_2="${GREEN}>\$(scm_status)"
    ## PROMPT_LINE_3="${PROMPT_USER}${PROMPT_HOST}${PROMPT_PROMPT}"
    ## export PS1="${GREEN}/${PROMPT_LINE_1}\n${PROMPT_LINE_2}\n${GREEN}\\\\${PROMPT_LINE_3}"
    ## export PS1='($?) [$USER@$HOSTNAME] \$ '
##  export PS1='\[\033]0;\u@\h:$_TMP_PWD\007\]($?) [\u@\h] \$ '
else
    if [ "$TERM" = "xterm" ] || [ "$TERM" = "cygwin" ]
    then
        export PS1=']0;$USER@$HOSTNAME:$PWD($?) [$USER@$HOSTNAME] \$ '
    else
        export PS1='($?) [$USER@$HOSTNAME] \$ '
    fi
fi
#
#
################################## end prompt ##################################

## export LSCOLORS=ExFxCxDxBxegedabagacad
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

#
# run per-machine commands that must be run at the end of .bash_profile (eg: for gvm)
#
plugin_source_post_profile
[ -f $ENVIRONMENT_DIR/Machines/${HOSTNAME}.post_profile ] && . $ENVIRONMENT_DIR/Machines/${HOSTNAME}.post_profile
